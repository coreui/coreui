{"version":3,"sources":["../../js/src/utilities/get-css-custom-properties.js","../../js/src/utilities/get-style.js","../../js/src/utilities/hex-to-rgb.js","../../js/src/utilities/hex-to-rgba.js","../../js/src/utilities/rgb-to-hex.js","../../js/src/utilities/deep-objects-merge.js","../../js/src/utilities/get-color.js"],"names":["getCssCustomProperties","cssCustomProperties","sheets","document","styleSheets","cssText","i","length","rules","cssRules","j","selectorText","substring","lastIndexOf","split","forEach","property","name","value","trim","element","style","body","match","Boolean","documentMode","window","getComputedStyle","getPropertyValue","replace","color","Error","r","g","b","parseInt","opacity","rgb","toString","slice","deepObjectsMerge","target","source","_arr","Object","keys","_i","key","assign","rawProperty"],"mappings":"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","sourcesContent":["const getCssCustomProperties = () => {\r\n  const cssCustomProperties = {}\r\n  const sheets = document.styleSheets\r\n  let cssText = ''\r\n  for (let i = sheets.length - 1; i > -1; i--) {\r\n    const rules = sheets[i].cssRules\r\n    for (let j = rules.length - 1; j > -1; j--) {\r\n      if (rules[j].selectorText === '.ie-custom-properties') {\r\n        cssText = rules[j].cssText\r\n        break\r\n      }\r\n    }\r\n    if (cssText) {\r\n      break\r\n    }\r\n  }\r\n\r\n  cssText = cssText.substring(\r\n    cssText.lastIndexOf('{') + 1,\r\n    cssText.lastIndexOf('}')\r\n  )\r\n\r\n  cssText.split(';').forEach((property) => {\r\n    if (property) {\r\n      const name = property.split(': ')[0]\r\n      const value = property.split(': ')[1]\r\n      if (name && value) {\r\n        cssCustomProperties[`--${name.trim()}`] = value.trim()\r\n      }\r\n    }\r\n  })\r\n  return cssCustomProperties\r\n}\r\n\r\nexport { getCssCustomProperties }\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.14): get-style.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\nimport { getCssCustomProperties } from './get-css-custom-properties'\r\n\r\nconst minIEVersion = 10\r\nconst isIE1x = () => Boolean(document.documentMode) && document.documentMode >= minIEVersion\r\nconst isCustomProperty = (property) => property.match(/^--.*/i)\r\n\r\nconst getStyle = (property, element = document.body) => {\r\n  let style\r\n  if (isCustomProperty(property) && isIE1x()) {\r\n    const cssCustomProperties = getCssCustomProperties()\r\n    style = cssCustomProperties[property]\r\n  } else {\r\n    style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '')\r\n  }\r\n  return style\r\n}\r\n\r\nexport { getStyle }\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.14): hex-to-rgb.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst hexToRgb = (color) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\r\n  if (!hex) {\r\n    throw new Error(`${color} is not a valid hex color`)\r\n  }\r\n  let r\r\n  let g\r\n  let b\r\n  if (color.length === 7) {\r\n    r = parseInt(color.substring(1, 3), 16)\r\n    g = parseInt(color.substring(3, 5), 16)\r\n    b = parseInt(color.substring(5, 7), 16)\r\n  } else {\r\n    r = parseInt(color.substring(1, 2), 16)\r\n    g = parseInt(color.substring(2, 3), 16)\r\n    b = parseInt(color.substring(3, 5), 16)\r\n  }\r\n\r\n  return `rgba(${r}, ${g}, ${b})`\r\n}\r\n\r\nexport { hexToRgb }\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.14): hex-to-rgba.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst hexToRgba = (color, opacity = 100) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\r\n  if (!hex) {\r\n    throw new Error(`${color} is not a valid hex color`)\r\n  }\r\n  let r\r\n  let g\r\n  let b\r\n  if (color.length === 7) {\r\n    r = parseInt(color.substring(1, 3), 16)\r\n    g = parseInt(color.substring(3, 5), 16)\r\n    b = parseInt(color.substring(5, 7), 16)\r\n  } else {\r\n    r = parseInt(color.substring(1, 2), 16)\r\n    g = parseInt(color.substring(2, 3), 16)\r\n    b = parseInt(color.substring(3, 5), 16)\r\n  }\r\n\r\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\r\n}\r\n\r\nexport { hexToRgba }\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI (v2.0.14): rgb-to-hex.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n/* eslint-disable no-magic-numbers */\r\nconst rgbToHex = (color) => {\r\n  if (typeof color === 'undefined') {\r\n    throw new Error('Hex color is not defined')\r\n  }\r\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\r\n  if (!rgb) {\r\n    throw new Error(`${color} is not a valid rgb color`)\r\n  }\r\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\r\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\r\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\r\n\r\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\r\n}\r\n\r\nexport { rgbToHex }\r\n","const deepObjectsMerge = (target, source) => {\r\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n  for (let key of Object.keys(source)) {\r\n    if (source[key] instanceof Object) Object.assign(source[key], deepObjectsMerge(target[key], source[key]))\r\n  }\r\n\r\n  // Join `target` and modified `source`\r\n  Object.assign(target || {}, source)\r\n  return target\r\n}\r\n\r\nexport { deepObjectsMerge };\r\n","/**\r\n * --------------------------------------------------------------------------\r\n * CoreUI Utilities (v2.0.14): get-color.js\r\n * Licensed under MIT (https://coreui.io/license)\r\n * --------------------------------------------------------------------------\r\n */\r\nimport { getCssCustomProperties } from './get-css-custom-properties'\r\n\r\nconst minIEVersion = 10\r\nconst isIE1x = () => Boolean(document.documentMode) && document.documentMode >= minIEVersion\r\nconst isCustomProperty = (property) => property.match(/^--.*/i)\r\n\r\nconst getColor = (rawProperty, element = document.body) => {\r\n  let property = '--' + rawProperty\r\n  let style\r\n  if (isCustomProperty(property) && isIE1x()) {\r\n    const cssCustomProperties = getCssCustomProperties()\r\n    style = cssCustomProperties[property]\r\n  } else {\r\n    style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '')\r\n  }\r\n  return style? style: rawProperty\r\n}\r\n\r\nexport { getColor }\r\n"]}