{"version":3,"file":"polyfill.js","sources":["../../src/util/index.js","../../src/dom/polyfill.js"],"sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap (v5.0.0-alpha1): util/index.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nconst MAX_UID = 1000000\r\nconst MILLISECONDS_MULTIPLIER = 1000\r\nconst TRANSITION_END = 'transitionend'\r\n\r\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\r\nconst toType = obj => {\r\n  if (obj === null || obj === undefined) {\r\n    return `${obj}`\r\n  }\r\n\r\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\r\n}\r\n\r\n/**\r\n * --------------------------------------------------------------------------\r\n * Public Util Api\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nconst getUID = prefix => {\r\n  do {\r\n    prefix += Math.floor(Math.random() * MAX_UID)\r\n  } while (document.getElementById(prefix))\r\n\r\n  return prefix\r\n}\r\n\r\nconst getSelector = element => {\r\n  let selector = element.getAttribute('data-target')\r\n\r\n  if (!selector || selector === '#') {\r\n    const hrefAttr = element.getAttribute('href')\r\n\r\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\r\n  }\r\n\r\n  return selector\r\n}\r\n\r\nconst getSelectorFromElement = element => {\r\n  const selector = getSelector(element)\r\n\r\n  if (selector) {\r\n    return document.querySelector(selector) ? selector : null\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst getElementFromSelector = element => {\r\n  const selector = getSelector(element)\r\n\r\n  return selector ? document.querySelector(selector) : null\r\n}\r\n\r\nconst getTransitionDurationFromElement = element => {\r\n  if (!element) {\r\n    return 0\r\n  }\r\n\r\n  // Get transition-duration of the element\r\n  let {\r\n    transitionDuration,\r\n    transitionDelay\r\n  } = window.getComputedStyle(element)\r\n\r\n  const floatTransitionDuration = parseFloat(transitionDuration)\r\n  const floatTransitionDelay = parseFloat(transitionDelay)\r\n\r\n  // Return 0 if element or transition duration is not found\r\n  if (!floatTransitionDuration && !floatTransitionDelay) {\r\n    return 0\r\n  }\r\n\r\n  // If multiple durations are defined, take the first\r\n  transitionDuration = transitionDuration.split(',')[0]\r\n  transitionDelay = transitionDelay.split(',')[0]\r\n\r\n  return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\r\n}\r\n\r\nconst triggerTransitionEnd = element => {\r\n  element.dispatchEvent(new Event(TRANSITION_END))\r\n}\r\n\r\nconst isElement = obj => (obj[0] || obj).nodeType\r\n\r\nconst emulateTransitionEnd = (element, duration) => {\r\n  let called = false\r\n  const durationPadding = 5\r\n  const emulatedDuration = duration + durationPadding\r\n  function listener() {\r\n    called = true\r\n    element.removeEventListener(TRANSITION_END, listener)\r\n  }\r\n\r\n  element.addEventListener(TRANSITION_END, listener)\r\n  setTimeout(() => {\r\n    if (!called) {\r\n      triggerTransitionEnd(element)\r\n    }\r\n  }, emulatedDuration)\r\n}\r\n\r\nconst typeCheckConfig = (componentName, config, configTypes) => {\r\n  Object.keys(configTypes)\r\n    .forEach(property => {\r\n      const expectedTypes = configTypes[property]\r\n      const value = config[property]\r\n      const valueType = value && isElement(value) ?\r\n        'element' :\r\n        toType(value)\r\n\r\n      if (!new RegExp(expectedTypes).test(valueType)) {\r\n        throw new Error(\r\n          `${componentName.toUpperCase()}: ` +\r\n          `Option \"${property}\" provided type \"${valueType}\" ` +\r\n          `but expected type \"${expectedTypes}\".`)\r\n      }\r\n    })\r\n}\r\n\r\nconst isVisible = element => {\r\n  if (!element) {\r\n    return false\r\n  }\r\n\r\n  if (element.style && element.parentNode && element.parentNode.style) {\r\n    const elementStyle = getComputedStyle(element)\r\n    const parentNodeStyle = getComputedStyle(element.parentNode)\r\n\r\n    return elementStyle.display !== 'none' &&\r\n      parentNodeStyle.display !== 'none' &&\r\n      elementStyle.visibility !== 'hidden'\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nconst findShadowRoot = element => {\r\n  if (!document.documentElement.attachShadow) {\r\n    return null\r\n  }\r\n\r\n  // Can find the shadow root otherwise it'll return the document\r\n  if (typeof element.getRootNode === 'function') {\r\n    const root = element.getRootNode()\r\n    return root instanceof ShadowRoot ? root : null\r\n  }\r\n\r\n  if (element instanceof ShadowRoot) {\r\n    return element\r\n  }\r\n\r\n  // when we don't find a shadow root\r\n  if (!element.parentNode) {\r\n    return null\r\n  }\r\n\r\n  return findShadowRoot(element.parentNode)\r\n}\r\n\r\nconst noop = () => function () {}\r\n\r\nconst reflow = element => element.offsetHeight\r\n\r\nconst getjQuery = () => {\r\n  const { jQuery } = window\r\n\r\n  if (jQuery && !document.body.hasAttribute('data-no-jquery')) {\r\n    return jQuery\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {\r\n  getjQuery,\r\n  TRANSITION_END,\r\n  getUID,\r\n  getSelectorFromElement,\r\n  getElementFromSelector,\r\n  getTransitionDurationFromElement,\r\n  triggerTransitionEnd,\r\n  isElement,\r\n  emulateTransitionEnd,\r\n  typeCheckConfig,\r\n  isVisible,\r\n  findShadowRoot,\r\n  noop,\r\n  reflow\r\n}\r\n","/* istanbul ignore file */\r\n\r\n/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap (v5.0.0-alpha1): dom/polyfill.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nimport { getUID } from '../util/index'\r\n\r\nlet find = Element.prototype.querySelectorAll\r\nlet findOne = Element.prototype.querySelector\r\n\r\n// MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\r\nconst defaultPreventedPreservedOnDispatch = (() => {\r\n  const e = new CustomEvent('Bootstrap', {\r\n    cancelable: true\r\n  })\r\n\r\n  const element = document.createElement('div')\r\n  element.addEventListener('Bootstrap', () => null)\r\n\r\n  e.preventDefault()\r\n  element.dispatchEvent(e)\r\n  return e.defaultPrevented\r\n})()\r\n\r\nconst scopeSelectorRegex = /:scope\\b/\r\nconst supportScopeQuery = (() => {\r\n  const element = document.createElement('div')\r\n\r\n  try {\r\n    element.querySelectorAll(':scope *')\r\n  } catch (_) {\r\n    return false\r\n  }\r\n\r\n  return true\r\n})()\r\n\r\nif (!supportScopeQuery) {\r\n  find = function (selector) {\r\n    if (!scopeSelectorRegex.test(selector)) {\r\n      return this.querySelectorAll(selector)\r\n    }\r\n\r\n    const hasId = Boolean(this.id)\r\n\r\n    if (!hasId) {\r\n      this.id = getUID('scope')\r\n    }\r\n\r\n    let nodeList = null\r\n    try {\r\n      selector = selector.replace(scopeSelectorRegex, `#${this.id}`)\r\n      nodeList = this.querySelectorAll(selector)\r\n    } finally {\r\n      if (!hasId) {\r\n        this.removeAttribute('id')\r\n      }\r\n    }\r\n\r\n    return nodeList\r\n  }\r\n\r\n  findOne = function (selector) {\r\n    if (!scopeSelectorRegex.test(selector)) {\r\n      return this.querySelector(selector)\r\n    }\r\n\r\n    const matches = find.call(this, selector)\r\n\r\n    if (typeof matches[0] !== 'undefined') {\r\n      return matches[0]\r\n    }\r\n\r\n    return null\r\n  }\r\n}\r\n\r\nexport {\r\n  find,\r\n  findOne,\r\n  defaultPreventedPreservedOnDispatch\r\n}\r\n"],"names":["MAX_UID","getUID","prefix","Math","floor","random","document","getElementById","find","Element","prototype","querySelectorAll","findOne","querySelector","defaultPreventedPreservedOnDispatch","e","CustomEvent","cancelable","element","createElement","addEventListener","preventDefault","dispatchEvent","defaultPrevented","scopeSelectorRegex","supportScopeQuery","_","selector","test","hasId","Boolean","id","nodeList","replace","removeAttribute","matches","call"],"mappings":";;;;;;;;;;;EAAA;;;;;;EAOA,IAAMA,OAAO,GAAG,OAAhB;EAaA;;;;;;;EAMA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,MAAM,EAAI;EACvB,KAAG;EACDA,IAAAA,MAAM,IAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,OAA3B,CAAV;EACD,GAFD,QAESM,QAAQ,CAACC,cAAT,CAAwBL,MAAxB,CAFT;;EAIA,SAAOA,MAAP;EACD,CAND;;EC1BA;AAWIM,cAAI,GAAGC,OAAO,CAACC,SAAR,CAAkBC;AACzBC,iBAAO,GAAGH,OAAO,CAACC,SAAR,CAAkBG;;MAG1BC,mCAAmC,GAAI,YAAM;EACjD,MAAMC,CAAC,GAAG,IAAIC,WAAJ,CAAgB,WAAhB,EAA6B;EACrCC,IAAAA,UAAU,EAAE;EADyB,GAA7B,CAAV;EAIA,MAAMC,OAAO,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,KAAvB,CAAhB;EACAD,EAAAA,OAAO,CAACE,gBAAR,CAAyB,WAAzB,EAAsC;EAAA,WAAM,IAAN;EAAA,GAAtC;EAEAL,EAAAA,CAAC,CAACM,cAAF;EACAH,EAAAA,OAAO,CAACI,aAAR,CAAsBP,CAAtB;EACA,SAAOA,CAAC,CAACQ,gBAAT;EACD,CAX2C;;EAa5C,IAAMC,kBAAkB,GAAG,UAA3B;;EACA,IAAMC,iBAAiB,GAAI,YAAM;EAC/B,MAAMP,OAAO,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,KAAvB,CAAhB;;EAEA,MAAI;EACFD,IAAAA,OAAO,CAACP,gBAAR,CAAyB,UAAzB;EACD,GAFD,CAEE,OAAOe,CAAP,EAAU;EACV,WAAO,KAAP;EACD;;EAED,SAAO,IAAP;EACD,CAVyB,EAA1B;;EAYA,IAAI,CAACD,iBAAL,EAAwB;EACtBjB,EAAAA,YAAI,GAAG,cAAUmB,QAAV,EAAoB;EACzB,QAAI,CAACH,kBAAkB,CAACI,IAAnB,CAAwBD,QAAxB,CAAL,EAAwC;EACtC,aAAO,KAAKhB,gBAAL,CAAsBgB,QAAtB,CAAP;EACD;;EAED,QAAME,KAAK,GAAGC,OAAO,CAAC,KAAKC,EAAN,CAArB;;EAEA,QAAI,CAACF,KAAL,EAAY;EACV,WAAKE,EAAL,GAAU9B,MAAM,CAAC,OAAD,CAAhB;EACD;;EAED,QAAI+B,QAAQ,GAAG,IAAf;;EACA,QAAI;EACFL,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,OAAT,CAAiBT,kBAAjB,QAAyC,KAAKO,EAA9C,CAAX;EACAC,MAAAA,QAAQ,GAAG,KAAKrB,gBAAL,CAAsBgB,QAAtB,CAAX;EACD,KAHD,SAGU;EACR,UAAI,CAACE,KAAL,EAAY;EACV,aAAKK,eAAL,CAAqB,IAArB;EACD;EACF;;EAED,WAAOF,QAAP;EACD,GAtBD;;EAwBApB,EAAAA,eAAO,GAAG,iBAAUe,QAAV,EAAoB;EAC5B,QAAI,CAACH,kBAAkB,CAACI,IAAnB,CAAwBD,QAAxB,CAAL,EAAwC;EACtC,aAAO,KAAKd,aAAL,CAAmBc,QAAnB,CAAP;EACD;;EAED,QAAMQ,OAAO,GAAG3B,YAAI,CAAC4B,IAAL,CAAU,IAAV,EAAgBT,QAAhB,CAAhB;;EAEA,QAAI,OAAOQ,OAAO,CAAC,CAAD,CAAd,KAAsB,WAA1B,EAAuC;EACrC,aAAOA,OAAO,CAAC,CAAD,CAAd;EACD;;EAED,WAAO,IAAP;EACD,GAZD;EAaD;;;;;;;;;;;;"}