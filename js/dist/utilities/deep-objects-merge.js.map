{"version":3,"sources":["../../src/utilities/deep-objects-merge.js"],"names":["deepObjectsMerge","target","source","Object","keys","key","assign"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD,EAASC,MAAT,EAAoB;AAC3C;AAD2C,aAE3BC,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAF2B;;AAE3C,2CAAqC;AAAhC,QAAIG,GAAG,WAAP;AACH,QAAIH,MAAM,CAACG,GAAD,CAAN,YAAuBF,MAA3B,EAAmCA,MAAM,CAACG,MAAP,CAAcJ,MAAM,CAACG,GAAD,CAApB,EAA2BL,gBAAgB,CAACC,MAAM,CAACI,GAAD,CAAP,EAAcH,MAAM,CAACG,GAAD,CAApB,CAA3C;AACpC,GAJ0C,CAM3C;;;AACAF,EAAAA,MAAM,CAACG,MAAP,CAAcL,MAAM,IAAI,EAAxB,EAA4BC,MAA5B;AACA,SAAOD,MAAP;AACD,CATD","sourcesContent":["const deepObjectsMerge = (target, source) => {\r\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n  for (let key of Object.keys(source)) {\r\n    if (source[key] instanceof Object) Object.assign(source[key], deepObjectsMerge(target[key], source[key]))\r\n  }\r\n\r\n  // Join `target` and modified `source`\r\n  Object.assign(target || {}, source)\r\n  return target\r\n}\r\n\r\nexport { deepObjectsMerge };\r\n"],"file":"deep-objects-merge.js"}